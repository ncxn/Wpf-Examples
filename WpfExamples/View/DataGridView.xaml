<Controls:MetroWindow  x:Class="DataGridView"
                       xmlns:Controls="http://metro.mahapps.com/winfx/xaml/controls"
                       xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                       xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                       xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                       xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                       xmlns:local="clr-namespace:WpfExamples"
                       xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity" 
                       mc:Ignorable="d"
                       xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                       BorderBrush="{DynamicResource AccentColorBrush}"
                       BorderThickness="0"
                       WindowTransitionsEnabled="False"
                       GlowBrush="Teal"
                       ResizeMode="CanResizeWithGrip"
                       WindowStartupLocation="CenterScreen"
                       Title="Data GridView Example" Height="450" Width="800">

    <Controls:MetroWindow.WindowButtonCommands>
        <Controls:WindowButtonCommands Template="{DynamicResource MahApps.Metro.Templates.WindowButtonCommands.Win10}" />
    </Controls:MetroWindow.WindowButtonCommands>
    
    <Window.DataContext>
        <local:UsersVM />
    </Window.DataContext>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="70"/>
            <RowDefinition/>
        </Grid.RowDefinitions>
        <Grid Grid.Row="0">
            <StackPanel Orientation="Vertical">
                <ToolBarTray Cursor="Hand" IsLocked="True">
                    <ToolBar
                        Style="{DynamicResource MaterialDesignToolBar}"
                        ClipToBounds="False">
                        <Button
                            ToolTip="Add">
                            <materialDesign:PackIcon Kind="Add" />
                        </Button>
                        <Button
                            ToolTip="Edit"
                            Command="{Binding EditCmd}"
                            CommandParameter="{Binding SelectedUser, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
                            <materialDesign:PackIcon Kind="ModeEditOutline" />
                        </Button>
                        <Button
                            ToolTip="Delele"
                            Command="{Binding DeleteCmd}">
                            <materialDesign:PackIcon Kind="Delete" />
                        </Button>
                        <Button
                            ToolTip="Details">
                            <materialDesign:PackIcon Kind="Details" />
                        </Button>
                        <Separator />
                        <Button
                            Command="Cut"
                            ToolTip="Cut"
                            ToolBar.OverflowMode="AsNeeded">
                            <materialDesign:PackIcon
                                Kind="ContentCut" />
                        </Button>
                        <Button
                            Command="Copy"
                            ToolTip="Copy that stuff"
                            ToolBar.OverflowMode="AsNeeded">
                            <materialDesign:PackIcon
                                Kind="ContentCopy" />
                        </Button>
                        <Separator />
                        <Button
                            Command="Paste"
                            ToolTip="Paste some stuff"
                            ToolBar.OverflowMode="AsNeeded">
                            <materialDesign:PackIcon
                                Kind="ContentPaste" />
                        </Button>
                        <Separator />
                        <Button
                            ToolTip="Print">
                            <materialDesign:PackIcon Kind="Printer" />
                        </Button>
                        <Button
                            ToolTip="Email">
                            <materialDesign:PackIcon Kind="Send" />
                        </Button>

                    </ToolBar>
                </ToolBarTray>
            </StackPanel>
        </Grid>
        <Grid Grid.Row="1">
            <DataGrid x:Name ="UsersDataGrid" 
                      Style="{DynamicResource AzureDataGrid}"
                      AutoGenerateColumns="False"
                      SelectionMode="Extended"
                      ItemsSource="{Binding Path=Users, UpdateSourceTrigger=PropertyChanged}"   
                      SelectedItem="{Binding SelectedUser, UpdateSourceTrigger = PropertyChanged, Mode = TwoWay}"
                      >
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="SelectionChanged">
                        <i:InvokeCommandAction CommandParameter="{Binding ElementName=UsersDataGrid, Path=SelectedItems}" Command="{Binding SelectedUsersCmd }" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <DataGrid.RowStyle>
                    <Style TargetType="DataGridRow" BasedOn="{StaticResource {x:Type DataGridRow}}">
                        <Style.Triggers>
                            <!-- Order of these triggers matter as the last one will take precedence-->
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Background" Value="LightBlue" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="Azure" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </DataGrid.RowStyle>
                <DataGrid.CellStyle>
                    <!-- When the cell is selected, switching to transparent to let the row's Background be visible-->
                    <Style TargetType="DataGridCell" BasedOn="{StaticResource {x:Type DataGridCell}}">
                        <Style.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Background" Value="Transparent" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </DataGrid.CellStyle>
                <DataGrid.Columns>
                    <DataGridCheckBoxColumn
                        Binding="{Binding Path=IsSelected, Mode=TwoWay,
                        RelativeSource={RelativeSource FindAncestor,
                        AncestorType={x:Type DataGridRow}}}"
                        ElementStyle="{StaticResource MaterialDesignDataGridCheckBoxColumnStyle}"
                        EditingElementStyle="{StaticResource MaterialDesignDataGridCheckBoxColumnEditingStyle}">
                        <DataGridCheckBoxColumn.Header>
                            <!--padding to allow hit test to pass thru for sorting -->
                            <Border
                                Background="Transparent"
                                Padding="6 0 6 0"
                                HorizontalAlignment="Center">
                                <CheckBox Checked="CheckBox_Checked" Unchecked="CheckBox_UnChecked" IsChecked="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=DataContext.IsAllItemsSelected}" Content=""/>
                            </Border>
                        </DataGridCheckBoxColumn.Header>
                    </DataGridCheckBoxColumn>
                    <DataGridTextColumn Binding="{Binding UserName}" Header="User Name"/>
                    <DataGridTextColumn Binding="{Binding UserEmail, UpdateSourceTrigger=PropertyChanged}" Header="Email"/>
                    <DataGridTextColumn Binding="{Binding UserCreate_at, UpdateSourceTrigger=PropertyChanged}" Header="Create At"/>
                    <DataGridTextColumn Binding="{Binding UserUpdate_at, UpdateSourceTrigger=PropertyChanged}" Header="Update At"/>
                </DataGrid.Columns>
            </DataGrid>
        </Grid>
    </Grid>
</Controls:MetroWindow>
